@import "math";
@import "settings";


@mixing animateWrap($seconds, $color, $opacity) {
    
}

@keyframes overlay-wrap-animate {
    @for $percentage from 1 through 100 {
        $angle90max: round($percentage * 3.6deg % 90deg);
        #{$percentage * 1%} {
            -webkit-transform: rotate(#{$angle90max});
            transform: rotate(#{$angle90max});
        } 
    }
}

@keyframes q4-animate {
    @for $percentage from 0 through 360 {
        $angle90max: round($percentage * 3.6deg % 90deg);
        #{$percentage * 1%} {
            @if $angle90max > 0deg {
                background-color: transparent;
                height: 0;
                width: 0;
                border-bottom-width: $border-size;
                border-right-width: $border-size * tan($angle90max);
            }
        } 
    }
}

@keyframes q3-animate {
    @for $percentage from 0 through 360 {
        $angle: round($percentage * 3.6deg);
        $angle90max: round($percentage * 3.6deg % 90deg);
        #{$percentage * 1%} {
            @if $angle >  270deg {
                visibility: hidden;
            }
        } 
    }
}

@keyframes q2-animate {
    @for $percentage from 0 through 360 {
        $angle: round($percentage * 3.6deg);
        $angle90max: round($percentage * 3.6deg % 90deg);
        #{$percentage * 1%} {
            @if $angle >  180deg {
                visibility: hidden;
            }
        } 
    }
}

@keyframes q1-animate {
    @for $percentage from 0 through 360 {
        $angle: round($percentage * 3.6deg);
        $angle90max: round($percentage * 3.6deg % 90deg);
        #{$percentage * 1%} {
            @if $angle >  90deg {
                visibility: hidden;
            }
        } 
    }
}

@mixin cooldownWrapColors($color, $opacity) {
    .overlay-wrap {
        opacity: $opacity;
        & > * {
            background-color: $color;
            border-bottom-color: $color;
        }
    }
}

@mixin cooldownWrap($color, $opacity) {
    @include cooldownWrapColors($color, $opacity);
    box-sizing: border-box;
    overflow: hidden;
    $size: 100%;

    .overlay-wrap {
        box-sizing: border-box;
        height: $size;
        width: $size;
        position: relative;
        transform-origin: center center;

        & > * {
            box-sizing: border-box;
            position: absolute;
            color: transparent;
            display: block; 
            height: $size;
            width: $size;
            
            border-bottom-style: solid;
            border-bottom-width: 0;
            border-right-color: transparent;
            border-right-style: solid;
            border-right-width: 0;
            &.q1 {
                left: $size / 2;
                bottom: $size / 2;

            }
            &.q2 {
                left: $size / 2;
                top: $size / 2;
            }
            &.q3 {
                right: $size / 2;
                top: $size / 2;
            }
            &.q4 {
                right: $size / 2;
                bottom: $size / 2;
            }
        }
    }
    @for $i from 1deg through 360deg {
        @include cooldownByAngle($i);
    }
    &.animated {
        $anim-duration: 360s;
        .overlay-wrap {
            animation-name: overlay-wrap-animate;
            animation-duration: $anim-duration;
            animation-iteration-count: infinite; 
            .q4 {
                animation-name: q4-animate;
                animation-duration: $anim-duration;
                animation-iteration-count: infinite; 
            }
            .q3 {
                animation-name: q3-animate;
                animation-duration: $anim-duration;
                animation-iteration-count: infinite; 
            }
            .q2 {
                animation-name: q2-animate;
                animation-duration: $anim-duration;
                animation-iteration-count: infinite; 
            }
            .q1 {
                animation-name: q1-animate;
                animation-duration: $anim-duration;
                animation-iteration-count: infinite; 
            }
        }
    }
}

@mixin triangle($angle, $size) {
    background-color: transparent;
    height: 0;
    width: 0;
    border-bottom-width: $size;
    border-right-width: $size * tan($angle);
}

@mixin cooldownByAngle($angle) {
    $angle: round($angle);
    $angle90max: $angle % 90;
    &.p#{$angle} {
        .overlay-wrap {
            transform: rotate(#{$angle90max});
            .q4 {
                @if $angle90max > 0deg {
                    @include triangle($angle90max, $border-size);
                }
            }
            @if $angle >=  90deg {
                .q1 {
                    visibility: hidden;
                }
            }
            @if $angle >= 180deg {
                .q2 {
                    visibility: hidden;
                }
            }
            @if $angle >= 270deg {
                .q3 {
                    visibility: hidden;
                }
            }
            @if $angle >= 360deg {
                .q4 {
                    visibility: hidden;
                }
            }
        }
    }
}